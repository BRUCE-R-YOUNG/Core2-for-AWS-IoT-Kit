From 403c24fbb8444091f96893ee25beb979efb33e1c Mon Sep 17 00:00:00 2001
From: Carl Lundin <lundinc@amazon.com>
Date: Thu, 15 Oct 2020 10:30:28 -0700
Subject: [PATCH] Set up project for a TrustCustom.

---
 examples/subscribe_publish/instructions.md    | 47 +++++++++++++++++++
 .../main/subscribe_publish_sample.c           | 21 +++++++++
 2 files changed, 68 insertions(+)
 create mode 100644 examples/subscribe_publish/instructions.md

diff --git a/examples/subscribe_publish/instructions.md b/examples/subscribe_publish/instructions.md
new file mode 100644
index 0000000..3e91e07
--- /dev/null
+++ b/examples/subscribe_publish/instructions.md
@@ -0,0 +1,47 @@
+# Set up project config
+1. idf.py menu config
+    1. Enable the following settings:
+        1. components/mbedtls/enable hardware ECDSA sign/verify (Not necessary)
+        1. components/esp-cryptoauthlib/
+            1. Choose type of ecc608a chip -> TrustCustom
+            1. Enable Hardware ECDSA keys for mbedTLS
+            1. Enable ATECC608A sign operations for mbedTLS
+            1. Enable ATECC608A verify operations for mbedTLS
+        1. components/AWS IoT platform
+            1. Enable Use hardware secure element for authenticating TLS connections
+            1. Specify AWS IoT Endpoint
+        1. Example configuration/
+            1. set WiFi SSID
+            1. set WiFi password
+            1. set AWS IoT Client ID (This should be the same as the ECC608A serial number ! )
+
+
+# Provision ATECC608A
+1. cd components/esp-cryptoauthlib/esp_cryptoauth_utility
+1. python secure_cert_mfg.py --signer-cert signercert.pem --signer-cert-private-key signerkey.pem --port
+    1. Note for this, you don't need to specify the signer certs, and it will reuse the default ones, but it's probably best to create your own.
+    1. If you want to make your own:
+        1. `openssl ecparam -out signerkey.pem -name prime256v1 -genkey`
+        1. `openssl req -new -x509 -key signerkey.pem -out signercert.pem -days 365`
+# JITP with AWS IoT Core
+CLI Instructions [here](https://github.com/aws/amazon-freertos/tree/master/vendors/microchip/secure_elements/app/example_trust_chain_tool). Note I am too lazy to rewrite these for this demo, but it should lead to how to do it.
+Alternatively go through the GUI on the AWS console. 
+
+##Just make sure the following is done
+1. Create thing named the same as the ECC608A serial.
+1. Upload **signer** cert as a CA.
+1. Upload **device** cert as a regular certificate. This was output by the `secure_cert_mfg.py` script. It will be located in `output_files` as `device_cert.pem`. It also gets printed by the stdout when running the script.
+1. Activate the certs.
+1. Attach policies to certs (I used blanket access to all IoT stuff).
+1. Attach device cert to thing.
+
+# Modify code
+I have prepared a patch that completes all the code changes. The only step is to swap the contents of the variable `device_cert` in **subscribe_publish_sample.c** with the contents of the device cert created when you provisioned your device.
+
+Apply them with `git apply patch` in the proper git repository. One for **esp-aws-iot** and the other for **esp-cryptoauthlib**.
+
+The code changes summarized:
+* Export atcab_basic include path
+* Initializ ecc608a at startup
+* point device cert to hard coded certificate string
+* Initialize MQTT parameters so they use atca stack
diff --git a/examples/subscribe_publish/main/subscribe_publish_sample.c b/examples/subscribe_publish/main/subscribe_publish_sample.c
index c5b48ae..21ac5f8 100644
--- a/examples/subscribe_publish/main/subscribe_publish_sample.c
+++ b/examples/subscribe_publish/main/subscribe_publish_sample.c
@@ -39,6 +39,7 @@
 #include "esp_log.h"
 #include "esp_vfs_fat.h"
 #include "driver/sdmmc_host.h"
+#include "atca_basic.h"
 
 #include "nvs.h"
 #include "nvs_flash.h"
@@ -98,6 +99,19 @@ static const char * ROOT_CA_PATH = CONFIG_EXAMPLE_ROOT_CA_PATH;
 #error "Invalid method for loading certs"
 #endif
 
+static const char * device_cert = "-----BEGIN CERTIFICATE-----\n" \
+"MIIBzDCCAXOgAwIBAgIQbcgDxI1eJ6au35rN6Cn62zAKBggqhkjOPQQDAjBeMQsw\n" \
+"CQYDVQQGEwJVUzELMAkGA1UECAwCV0ExDDAKBgNVBAcMA1NlYTEPMA0GA1UECgwG\n" \
+"QW1hem9uMQwwCgYDVQQLDANJb1QxFTATBgNVBAMMDGVzcC10ZXN0RkZGRjAgFw0y\n" \
+"MDEwMTQyMjAwMDBaGA8yMDYwMTAxNDIyMDAwMFowLjEPMA0GA1UECgwGQW1hem9u\n" \
+"MRswGQYDVQQDDBIwMTIzMkFDNjg0RkE3QzQ2RUUwWTATBgcqhkjOPQIBBggqhkjO\n" \
+"PQMBBwNCAARlczRS82F0fG9m6jST+WpL7VLLe67aXoOSXlwpQGixdQZ618Hx8RRS\n" \
+"QwCIeUmia1HpPnLlZoJTbhJybOMBbk6So0EwPzAOBgNVHQ8BAf8EBAMCBeAwDAYD\n" \
+"VR0TAQH/BAIwADAfBgNVHSMEGDAWgBQAE5cReLx1HUy0ToAEDqCG/RzS6TAKBggq\n" \
+"hkjOPQQDAgNHADBEAiBVSlDSH0lAanhkdSFJjjKQkWyePu8fMAPfOeiylccCcgIg\n" \
+"YIs2Mx2xYUH92RtDdTRYTW3ohMQkbukiJMe4Sz+dfj0=\n" \
+"-----END CERTIFICATE-----";
+
 /**
  * @brief Default MQTT HOST URL is pulled from the aws_iot_config.h
  */
@@ -108,6 +122,7 @@ char HostAddress[255] = AWS_IOT_MQTT_HOST;
  */
 uint32_t port = AWS_IOT_MQTT_PORT;
 
+extern ATCAIfaceCfg cfg_ateccx08a_i2c_default;
 
 static esp_err_t event_handler(void *ctx, system_event_t *event)
 {
@@ -188,6 +203,11 @@ void aws_iot_task(void *param) {
     mqttInitParams.pDevicePrivateKeyLocation = DEVICE_PRIVATE_KEY_PATH;
 #endif
 
+    /* For secure element. */
+    mqttInitParams.pDeviceCertLocation = (const char *)device_cert;
+    mqttInitParams.pDevicePrivateKeyLocation = "#0";
+    
+
     mqttInitParams.mqttCommandTimeout_ms = 20000;
     mqttInitParams.tlsHandshakeTimeout_ms = 5000;
     mqttInitParams.isSSLHostnameVerify = true;
@@ -328,5 +348,6 @@ void app_main()
     ESP_ERROR_CHECK( err );
 
     initialise_wifi();
+    atcab_init(&cfg_ateccx08a_i2c_default);
     xTaskCreatePinnedToCore(&aws_iot_task, "aws_iot_task", 9216, NULL, 5, NULL, 1);
 }
-- 
2.28.0

